import { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface AccessControlSegregatorInterface extends utils.Interface {
    contractName: "AccessControlSegregator";
    functions: {
        "GRANT_ACCESS_SIG()": FunctionFragment;
        "functionAccess(bytes4)": FunctionFragment;
        "hasAccess(bytes4,address)": FunctionFragment;
        "grantAccess(bytes4,address)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "GRANT_ACCESS_SIG", values?: undefined): string;
    encodeFunctionData(functionFragment: "functionAccess", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "hasAccess", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "grantAccess", values: [BytesLike, string]): string;
    decodeFunctionResult(functionFragment: "GRANT_ACCESS_SIG", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "functionAccess", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasAccess", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantAccess", data: BytesLike): Result;
    events: {};
}
export interface AccessControlSegregator extends BaseContract {
    contractName: "AccessControlSegregator";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: AccessControlSegregatorInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        GRANT_ACCESS_SIG(overrides?: CallOverrides): Promise<[string]>;
        functionAccess(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;
        /**
         * Returns boolean value if account has access to function.
         * @param account Address of account.
         * @param sig Function identifier.
         */
        hasAccess(sig: BytesLike, account: string, overrides?: CallOverrides): Promise<[boolean]>;
        /**
         * Grants access to an account for a function.Set account to zero address to revoke access.
         * @param account Address of account.
         * @param sig Function identifier.
         */
        grantAccess(sig: BytesLike, account: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    GRANT_ACCESS_SIG(overrides?: CallOverrides): Promise<string>;
    functionAccess(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;
    /**
     * Returns boolean value if account has access to function.
     * @param account Address of account.
     * @param sig Function identifier.
     */
    hasAccess(sig: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;
    /**
     * Grants access to an account for a function.Set account to zero address to revoke access.
     * @param account Address of account.
     * @param sig Function identifier.
     */
    grantAccess(sig: BytesLike, account: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        GRANT_ACCESS_SIG(overrides?: CallOverrides): Promise<string>;
        functionAccess(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;
        /**
         * Returns boolean value if account has access to function.
         * @param account Address of account.
         * @param sig Function identifier.
         */
        hasAccess(sig: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;
        /**
         * Grants access to an account for a function.Set account to zero address to revoke access.
         * @param account Address of account.
         * @param sig Function identifier.
         */
        grantAccess(sig: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        GRANT_ACCESS_SIG(overrides?: CallOverrides): Promise<BigNumber>;
        functionAccess(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        /**
         * Returns boolean value if account has access to function.
         * @param account Address of account.
         * @param sig Function identifier.
         */
        hasAccess(sig: BytesLike, account: string, overrides?: CallOverrides): Promise<BigNumber>;
        /**
         * Grants access to an account for a function.Set account to zero address to revoke access.
         * @param account Address of account.
         * @param sig Function identifier.
         */
        grantAccess(sig: BytesLike, account: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        GRANT_ACCESS_SIG(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        functionAccess(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        /**
         * Returns boolean value if account has access to function.
         * @param account Address of account.
         * @param sig Function identifier.
         */
        hasAccess(sig: BytesLike, account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        /**
         * Grants access to an account for a function.Set account to zero address to revoke access.
         * @param account Address of account.
         * @param sig Function identifier.
         */
        grantAccess(sig: BytesLike, account: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
