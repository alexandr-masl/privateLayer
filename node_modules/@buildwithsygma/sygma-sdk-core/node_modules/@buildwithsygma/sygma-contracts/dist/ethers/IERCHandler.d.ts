import { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface IERCHandlerInterface extends utils.Interface {
    contractName: "IERCHandler";
    functions: {
        "setBurnable(address)": FunctionFragment;
        "withdraw(bytes)": FunctionFragment;
        "_resourceIDToTokenContractAddress(bytes32)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "setBurnable", values: [string]): string;
    encodeFunctionData(functionFragment: "withdraw", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "_resourceIDToTokenContractAddress", values: [BytesLike]): string;
    decodeFunctionResult(functionFragment: "setBurnable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "_resourceIDToTokenContractAddress", data: BytesLike): Result;
    events: {};
}
export interface IERCHandler extends BaseContract {
    contractName: "IERCHandler";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IERCHandlerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        /**
         * Marks {contractAddress} as mintable/burnable.
         * @param contractAddress Address of contract to be used when making or executing deposits.
         */
        setBurnable(contractAddress: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        /**
         * Withdraw funds from ERC safes.
         * @param data ABI-encoded withdrawal params relevant to the handler.
         */
        withdraw(data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        /**
         * Exposing getter for {_resourceIDToTokenContractAddress}.
         * @param resourceID ResourceID to be used.
         */
        _resourceIDToTokenContractAddress(resourceID: BytesLike, overrides?: CallOverrides): Promise<[string]>;
    };
    /**
     * Marks {contractAddress} as mintable/burnable.
     * @param contractAddress Address of contract to be used when making or executing deposits.
     */
    setBurnable(contractAddress: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    /**
     * Withdraw funds from ERC safes.
     * @param data ABI-encoded withdrawal params relevant to the handler.
     */
    withdraw(data: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    /**
     * Exposing getter for {_resourceIDToTokenContractAddress}.
     * @param resourceID ResourceID to be used.
     */
    _resourceIDToTokenContractAddress(resourceID: BytesLike, overrides?: CallOverrides): Promise<string>;
    callStatic: {
        /**
         * Marks {contractAddress} as mintable/burnable.
         * @param contractAddress Address of contract to be used when making or executing deposits.
         */
        setBurnable(contractAddress: string, overrides?: CallOverrides): Promise<void>;
        /**
         * Withdraw funds from ERC safes.
         * @param data ABI-encoded withdrawal params relevant to the handler.
         */
        withdraw(data: BytesLike, overrides?: CallOverrides): Promise<void>;
        /**
         * Exposing getter for {_resourceIDToTokenContractAddress}.
         * @param resourceID ResourceID to be used.
         */
        _resourceIDToTokenContractAddress(resourceID: BytesLike, overrides?: CallOverrides): Promise<string>;
    };
    filters: {};
    estimateGas: {
        /**
         * Marks {contractAddress} as mintable/burnable.
         * @param contractAddress Address of contract to be used when making or executing deposits.
         */
        setBurnable(contractAddress: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        /**
         * Withdraw funds from ERC safes.
         * @param data ABI-encoded withdrawal params relevant to the handler.
         */
        withdraw(data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        /**
         * Exposing getter for {_resourceIDToTokenContractAddress}.
         * @param resourceID ResourceID to be used.
         */
        _resourceIDToTokenContractAddress(resourceID: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        /**
         * Marks {contractAddress} as mintable/burnable.
         * @param contractAddress Address of contract to be used when making or executing deposits.
         */
        setBurnable(contractAddress: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        /**
         * Withdraw funds from ERC safes.
         * @param data ABI-encoded withdrawal params relevant to the handler.
         */
        withdraw(data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        /**
         * Exposing getter for {_resourceIDToTokenContractAddress}.
         * @param resourceID ResourceID to be used.
         */
        _resourceIDToTokenContractAddress(resourceID: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
