import { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface PermissionedGenericHandlerInterface extends utils.Interface {
    contractName: "PermissionedGenericHandler";
    functions: {
        "_bridgeAddress()": FunctionFragment;
        "_resourceIDToContractAddress(bytes32)": FunctionFragment;
        "_tokenContractAddressToTokenProperties(address)": FunctionFragment;
        "setResource(bytes32,address,bytes)": FunctionFragment;
        "deposit(bytes32,address,bytes)": FunctionFragment;
        "executeProposal(bytes32,bytes)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "_bridgeAddress", values?: undefined): string;
    encodeFunctionData(functionFragment: "_resourceIDToContractAddress", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "_tokenContractAddressToTokenProperties", values: [string]): string;
    encodeFunctionData(functionFragment: "setResource", values: [BytesLike, string, BytesLike]): string;
    encodeFunctionData(functionFragment: "deposit", values: [BytesLike, string, BytesLike]): string;
    encodeFunctionData(functionFragment: "executeProposal", values: [BytesLike, BytesLike]): string;
    decodeFunctionResult(functionFragment: "_bridgeAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "_resourceIDToContractAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "_tokenContractAddressToTokenProperties", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setResource", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeProposal", data: BytesLike): Result;
    events: {
        "FailedHandlerExecution()": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "FailedHandlerExecution"): EventFragment;
}
export declare type FailedHandlerExecutionEvent = TypedEvent<[], {}>;
export declare type FailedHandlerExecutionEventFilter = TypedEventFilter<FailedHandlerExecutionEvent>;
export interface PermissionedGenericHandler extends BaseContract {
    contractName: "PermissionedGenericHandler";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PermissionedGenericHandlerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        _bridgeAddress(overrides?: CallOverrides): Promise<[string]>;
        _resourceIDToContractAddress(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;
        _tokenContractAddressToTokenProperties(arg0: string, overrides?: CallOverrides): Promise<[
            string,
            string,
            number,
            string,
            boolean
        ] & {
            resourceID: string;
            depositFunctionSignature: string;
            depositFunctionDepositorOffset: number;
            executeFunctionSignature: string;
            isWhitelisted: boolean;
        }>;
        /**
         * Sets {_resourceIDToContractAddress} with {contractAddress}, {_tokenContractAddressToTokenProperties[contractAddress].resourceID} with {resourceID}, {_tokenContractAddressToTokenProperties[contractAddress].depositFunctionSignature} with {depositFunctionSig}, {_tokenContractAddressToTokenProperties[contractAddress].depositFunctionDepositorOffset} with {depositFunctionDepositorOffset}, {_tokenContractAddressToTokenProperties[contractAddress].executeFunctionSignature} with {executeFunctionSig}, and {_tokenContractAddressToTokenProperties[contractAddress].isWhitelisted} to true for {contractAddress}.
         * @param args Additional data to be passed to specified handler. Permissioned handler structure should be it constructed as follows: depositFunctionSig:              bytes4  bytes 0 - 4 depositFunctionDepositorOffset:  uint16  bytes 4 - 6 executeFunctionSig:              bytes4  bytes 6 - 10
         * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
         * @param resourceID ResourceID to be used when making deposits.
         */
        setResource(resourceID: BytesLike, contractAddress: string, args: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        /**
         * A deposit is initiated by making a deposit in the Bridge contract.Data passed into the function should be constructed as follows: len(data)                              uint256     bytes  0  - 32 data                                   bytes       bytes  32 - END{contractAddress} is required to be whitelistedIf {_tokenContractAddressToTokenProperties[contractAddress].depositFunctionSignature} is set, {metaData} is expected to consist of needed function arguments.
         * @param data Consists of: {resourceID}, {lenMetaData}, and {metaData} all padded to 32 bytes.
         * @param depositor Address of the account making deposit in the Bridge contract.
         * @param resourceID ResourceID used to find address of contract to be used for deposit.
         */
        deposit(resourceID: BytesLike, depositor: string, data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        /**
         * Proposal execution should be initiated when a proposal is finalized in the Bridge contract.Data passed into the function should be constructed as follows: len(data)                              uint256     bytes  0  - 32 data                                   bytes       bytes  32 - END{contractAddress} is required to be whitelistedIf {_tokenContractAddressToTokenProperties[contractAddress].executeFunctionSignature} is set, {metaData} is expected to consist of needed function arguments.
         * @param data Consists of {resourceID}, {lenMetaData}, and {metaData}.
         * @param resourceID ResourceID to be used when making deposits.
         */
        executeProposal(resourceID: BytesLike, data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    _bridgeAddress(overrides?: CallOverrides): Promise<string>;
    _resourceIDToContractAddress(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;
    _tokenContractAddressToTokenProperties(arg0: string, overrides?: CallOverrides): Promise<[
        string,
        string,
        number,
        string,
        boolean
    ] & {
        resourceID: string;
        depositFunctionSignature: string;
        depositFunctionDepositorOffset: number;
        executeFunctionSignature: string;
        isWhitelisted: boolean;
    }>;
    /**
     * Sets {_resourceIDToContractAddress} with {contractAddress}, {_tokenContractAddressToTokenProperties[contractAddress].resourceID} with {resourceID}, {_tokenContractAddressToTokenProperties[contractAddress].depositFunctionSignature} with {depositFunctionSig}, {_tokenContractAddressToTokenProperties[contractAddress].depositFunctionDepositorOffset} with {depositFunctionDepositorOffset}, {_tokenContractAddressToTokenProperties[contractAddress].executeFunctionSignature} with {executeFunctionSig}, and {_tokenContractAddressToTokenProperties[contractAddress].isWhitelisted} to true for {contractAddress}.
     * @param args Additional data to be passed to specified handler. Permissioned handler structure should be it constructed as follows: depositFunctionSig:              bytes4  bytes 0 - 4 depositFunctionDepositorOffset:  uint16  bytes 4 - 6 executeFunctionSig:              bytes4  bytes 6 - 10
     * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
     * @param resourceID ResourceID to be used when making deposits.
     */
    setResource(resourceID: BytesLike, contractAddress: string, args: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    /**
     * A deposit is initiated by making a deposit in the Bridge contract.Data passed into the function should be constructed as follows: len(data)                              uint256     bytes  0  - 32 data                                   bytes       bytes  32 - END{contractAddress} is required to be whitelistedIf {_tokenContractAddressToTokenProperties[contractAddress].depositFunctionSignature} is set, {metaData} is expected to consist of needed function arguments.
     * @param data Consists of: {resourceID}, {lenMetaData}, and {metaData} all padded to 32 bytes.
     * @param depositor Address of the account making deposit in the Bridge contract.
     * @param resourceID ResourceID used to find address of contract to be used for deposit.
     */
    deposit(resourceID: BytesLike, depositor: string, data: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    /**
     * Proposal execution should be initiated when a proposal is finalized in the Bridge contract.Data passed into the function should be constructed as follows: len(data)                              uint256     bytes  0  - 32 data                                   bytes       bytes  32 - END{contractAddress} is required to be whitelistedIf {_tokenContractAddressToTokenProperties[contractAddress].executeFunctionSignature} is set, {metaData} is expected to consist of needed function arguments.
     * @param data Consists of {resourceID}, {lenMetaData}, and {metaData}.
     * @param resourceID ResourceID to be used when making deposits.
     */
    executeProposal(resourceID: BytesLike, data: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        _bridgeAddress(overrides?: CallOverrides): Promise<string>;
        _resourceIDToContractAddress(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;
        _tokenContractAddressToTokenProperties(arg0: string, overrides?: CallOverrides): Promise<[
            string,
            string,
            number,
            string,
            boolean
        ] & {
            resourceID: string;
            depositFunctionSignature: string;
            depositFunctionDepositorOffset: number;
            executeFunctionSignature: string;
            isWhitelisted: boolean;
        }>;
        /**
         * Sets {_resourceIDToContractAddress} with {contractAddress}, {_tokenContractAddressToTokenProperties[contractAddress].resourceID} with {resourceID}, {_tokenContractAddressToTokenProperties[contractAddress].depositFunctionSignature} with {depositFunctionSig}, {_tokenContractAddressToTokenProperties[contractAddress].depositFunctionDepositorOffset} with {depositFunctionDepositorOffset}, {_tokenContractAddressToTokenProperties[contractAddress].executeFunctionSignature} with {executeFunctionSig}, and {_tokenContractAddressToTokenProperties[contractAddress].isWhitelisted} to true for {contractAddress}.
         * @param args Additional data to be passed to specified handler. Permissioned handler structure should be it constructed as follows: depositFunctionSig:              bytes4  bytes 0 - 4 depositFunctionDepositorOffset:  uint16  bytes 4 - 6 executeFunctionSig:              bytes4  bytes 6 - 10
         * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
         * @param resourceID ResourceID to be used when making deposits.
         */
        setResource(resourceID: BytesLike, contractAddress: string, args: BytesLike, overrides?: CallOverrides): Promise<void>;
        /**
         * A deposit is initiated by making a deposit in the Bridge contract.Data passed into the function should be constructed as follows: len(data)                              uint256     bytes  0  - 32 data                                   bytes       bytes  32 - END{contractAddress} is required to be whitelistedIf {_tokenContractAddressToTokenProperties[contractAddress].depositFunctionSignature} is set, {metaData} is expected to consist of needed function arguments.
         * @param data Consists of: {resourceID}, {lenMetaData}, and {metaData} all padded to 32 bytes.
         * @param depositor Address of the account making deposit in the Bridge contract.
         * @param resourceID ResourceID used to find address of contract to be used for deposit.
         */
        deposit(resourceID: BytesLike, depositor: string, data: BytesLike, overrides?: CallOverrides): Promise<string>;
        /**
         * Proposal execution should be initiated when a proposal is finalized in the Bridge contract.Data passed into the function should be constructed as follows: len(data)                              uint256     bytes  0  - 32 data                                   bytes       bytes  32 - END{contractAddress} is required to be whitelistedIf {_tokenContractAddressToTokenProperties[contractAddress].executeFunctionSignature} is set, {metaData} is expected to consist of needed function arguments.
         * @param data Consists of {resourceID}, {lenMetaData}, and {metaData}.
         * @param resourceID ResourceID to be used when making deposits.
         */
        executeProposal(resourceID: BytesLike, data: BytesLike, overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "FailedHandlerExecution()"(): FailedHandlerExecutionEventFilter;
        FailedHandlerExecution(): FailedHandlerExecutionEventFilter;
    };
    estimateGas: {
        _bridgeAddress(overrides?: CallOverrides): Promise<BigNumber>;
        _resourceIDToContractAddress(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        _tokenContractAddressToTokenProperties(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
        /**
         * Sets {_resourceIDToContractAddress} with {contractAddress}, {_tokenContractAddressToTokenProperties[contractAddress].resourceID} with {resourceID}, {_tokenContractAddressToTokenProperties[contractAddress].depositFunctionSignature} with {depositFunctionSig}, {_tokenContractAddressToTokenProperties[contractAddress].depositFunctionDepositorOffset} with {depositFunctionDepositorOffset}, {_tokenContractAddressToTokenProperties[contractAddress].executeFunctionSignature} with {executeFunctionSig}, and {_tokenContractAddressToTokenProperties[contractAddress].isWhitelisted} to true for {contractAddress}.
         * @param args Additional data to be passed to specified handler. Permissioned handler structure should be it constructed as follows: depositFunctionSig:              bytes4  bytes 0 - 4 depositFunctionDepositorOffset:  uint16  bytes 4 - 6 executeFunctionSig:              bytes4  bytes 6 - 10
         * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
         * @param resourceID ResourceID to be used when making deposits.
         */
        setResource(resourceID: BytesLike, contractAddress: string, args: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        /**
         * A deposit is initiated by making a deposit in the Bridge contract.Data passed into the function should be constructed as follows: len(data)                              uint256     bytes  0  - 32 data                                   bytes       bytes  32 - END{contractAddress} is required to be whitelistedIf {_tokenContractAddressToTokenProperties[contractAddress].depositFunctionSignature} is set, {metaData} is expected to consist of needed function arguments.
         * @param data Consists of: {resourceID}, {lenMetaData}, and {metaData} all padded to 32 bytes.
         * @param depositor Address of the account making deposit in the Bridge contract.
         * @param resourceID ResourceID used to find address of contract to be used for deposit.
         */
        deposit(resourceID: BytesLike, depositor: string, data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        /**
         * Proposal execution should be initiated when a proposal is finalized in the Bridge contract.Data passed into the function should be constructed as follows: len(data)                              uint256     bytes  0  - 32 data                                   bytes       bytes  32 - END{contractAddress} is required to be whitelistedIf {_tokenContractAddressToTokenProperties[contractAddress].executeFunctionSignature} is set, {metaData} is expected to consist of needed function arguments.
         * @param data Consists of {resourceID}, {lenMetaData}, and {metaData}.
         * @param resourceID ResourceID to be used when making deposits.
         */
        executeProposal(resourceID: BytesLike, data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        _bridgeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        _resourceIDToContractAddress(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        _tokenContractAddressToTokenProperties(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        /**
         * Sets {_resourceIDToContractAddress} with {contractAddress}, {_tokenContractAddressToTokenProperties[contractAddress].resourceID} with {resourceID}, {_tokenContractAddressToTokenProperties[contractAddress].depositFunctionSignature} with {depositFunctionSig}, {_tokenContractAddressToTokenProperties[contractAddress].depositFunctionDepositorOffset} with {depositFunctionDepositorOffset}, {_tokenContractAddressToTokenProperties[contractAddress].executeFunctionSignature} with {executeFunctionSig}, and {_tokenContractAddressToTokenProperties[contractAddress].isWhitelisted} to true for {contractAddress}.
         * @param args Additional data to be passed to specified handler. Permissioned handler structure should be it constructed as follows: depositFunctionSig:              bytes4  bytes 0 - 4 depositFunctionDepositorOffset:  uint16  bytes 4 - 6 executeFunctionSig:              bytes4  bytes 6 - 10
         * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
         * @param resourceID ResourceID to be used when making deposits.
         */
        setResource(resourceID: BytesLike, contractAddress: string, args: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        /**
         * A deposit is initiated by making a deposit in the Bridge contract.Data passed into the function should be constructed as follows: len(data)                              uint256     bytes  0  - 32 data                                   bytes       bytes  32 - END{contractAddress} is required to be whitelistedIf {_tokenContractAddressToTokenProperties[contractAddress].depositFunctionSignature} is set, {metaData} is expected to consist of needed function arguments.
         * @param data Consists of: {resourceID}, {lenMetaData}, and {metaData} all padded to 32 bytes.
         * @param depositor Address of the account making deposit in the Bridge contract.
         * @param resourceID ResourceID used to find address of contract to be used for deposit.
         */
        deposit(resourceID: BytesLike, depositor: string, data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        /**
         * Proposal execution should be initiated when a proposal is finalized in the Bridge contract.Data passed into the function should be constructed as follows: len(data)                              uint256     bytes  0  - 32 data                                   bytes       bytes  32 - END{contractAddress} is required to be whitelistedIf {_tokenContractAddressToTokenProperties[contractAddress].executeFunctionSignature} is set, {metaData} is expected to consist of needed function arguments.
         * @param data Consists of {resourceID}, {lenMetaData}, and {metaData}.
         * @param resourceID ResourceID to be used when making deposits.
         */
        executeProposal(resourceID: BytesLike, data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
