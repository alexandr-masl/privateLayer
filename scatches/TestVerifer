pragma solidity ^0.8.0;

interface IVerifier {
    function verifyProof(bytes memory proof, uint256[2] memory input) external returns (bool);
}

contract TokenMint {
    event TokensMinted(address indexed user, uint256 amount, bytes32 txHash);

    IVerifier public verifier;
    IWETH public token;
    mapping(bytes32 => bool) public processedTxs;

    constructor(address _verifier, address _token) {
        verifier = IVerifier(_verifier);
        token = IWETH(_token);
    }

    function mintTokens(address user, uint256 amount, bytes32 txHash, bytes memory proof, uint256[2] memory input) external {
        require(!processedTxs[txHash], "Transaction already processed");
        require(verifier.verifyProof(proof, input), "Invalid proof");

        token.mint(user, amount);
        processedTxs[txHash] = true;

        emit TokensMinted(user, amount, txHash);
    }
}
